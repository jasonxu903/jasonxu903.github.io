<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS 基础知识]]></title>
    <url>%2F2018%2F09%2F01%2FCSS-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[css 是什么CSS 全称 Cascading Style Sheets，即层叠样式表 css 如何构成12345h1 &#123; color: red; font-size: 14px; /*这是注释*/&#125; 以上面的代码为例：css由选择器和声明两部分构成，h1 就是选择器，color: red; 和 font-size: 14px; 就是声明。而声明又是由属性和值两部分构成的，color 和 font-size 是属性，red 和 14px 是值。 css 的作用是什么改变页面的默认样式，使之更加美观。 如何在页面上引用 css内联样式1&lt;h1 style="color:red;font-size:14px;"&gt;这是内联样式&lt;/h1&gt; 内联样式就是将 css 写在 html 标签的 style 属性里的一种方式。 内联样式无法使用伪类选择器。 内部样式1234567&lt;style type="text/css"&gt; h1 &#123; color: red; font-size: 14px; &#125;&lt;/style&gt;&lt;h1&gt;这是内部样式&lt;/h1&gt; 内部样式是指通过 style 标签，将样式表放入 html 文档中的一种方式。style 标签可以放到 html 文档的任何一个地方。 通常将 style 标签放在 head 标签里。 外部样式123&lt;head&gt; &lt;link rel="stylesheet" type="text/css" href="index.css"&gt;&lt;/head&gt; 1234&lt;style&gt; @import url("hello.css"); @import "world.css";&lt;/style&gt; 外部样式就是通过 link 标签来链接引入样式表加载样式的一种方式。 @import 的两种写法也可以引入外部样式，这种方法不常用。 浏览器的默认样式浏览器对每一个元素都有一个默认的样式，如果我们的 css 没有改变某个元素的样式，浏览器就会以默认的样式渲染这个元素。 css 书写规范 语法不区分大小写，但建议统一使用小写 不使用内联的style属性定义样式 id和class使用有意义的单词，分隔符建议使用 - 有可能就是用缩写 属性值是0的省略单位 块内容缩进 属性名冒号后面添加一个空格 css 学习方法css 的特点 css 没有为什么，你只能接受现实； css 有些属性互相影响，组合起来极其复杂； css 有些属性很独立，和其它属性没有任何关系。 css 的学习方法 观察法，即眼见为实； border 法，css 主要的调试用方法。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Form 表单]]></title>
    <url>%2F2018%2F09%2F01%2FForm-%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[表单标签1234&lt;form&gt; &lt;input type="text" name="username"&gt; &lt;input type="password" name="password"&gt;&lt;/form&gt; form 标签form 标签会将起内部所有的 input 元素得到的数据提交到指定地址。form 标签有两个关键的属性: action: 数据提交的地址。如 action=&quot;/abc&quot; method: 该属性有两个值，get 和 post get 请求本质上是 URL 的拼接，它会将 form 标签内所有的 input 数据拼接起来，组合成新的 URL 发送到指定地址。get 请求有一些缺点: 首先，如果表单数据中包含密码等隐私内容，get 请求会暴露这些隐私内容，存在安全隐患；其次，浏览器地址栏存在字符数的限制，如果表单数据过长，拼接后的 URL 超过了这个限制，URL 就会被浏览器截断发送，发送的数据也就不完整了。 post 请求不会改变 URL，理论上来说，post 不存在 get 请求的缺点。 如果想查询后台数据，或者该数据的安全性要求比较低，比如一篇论文，通过发送论文的名字，从后台得到整篇论文，这个过程应该使用 get；而如果想对后台发送数据，或该数据对安全性的要求比较高，比如发送账号密码给后台用于登陆，那么应该使用 post。 target: 在何处打开 action enctype: application/x-www-form-urlencoded: 在发送前编码所有字符（默认） text/plain: 空格转换为 “+” 加号，但不对特殊字符编码 multipart/form-data: 使用包含文件上传控件的表单时，必须使用该值（如音频文件，图片文件等） input 标签input 标签就是一个输入框，根据其 type 属性值的不同，可以输入的内容也有所不同。 type 属性的主要值 text: 可以进行单行的文本输入，并展示在输入框内； password: 可以进行单行的文本输入，但默认不以明文而以特殊符号代替展示在输入框内； checkbox: 依靠 name 属性分组的多选框，并且需要有 value 属性，如果没有 value，后台就不知道选择的是什么； radio: 依靠 name 属性分组的单选框，也需要 value 属性向后台展示选择项； name: 必须有的属性，如果没有该属性，数据就不会传给后台，当用于对单选或多选分组时，name 相同为同一组，name 不同为不同组； value: 和单选或多选框搭配使用，如果没有这个属性，后台就不知道数据包含的内容是什么； file: 文件上传，常与 accept 属性搭配使用； accept: 控制上传文件的文件类型，除了这个属性限制内的类型，其它类型不可选，如果没有这个属性，则任何类型的文件都可选； hidden: 当这个值存在时， input 不会出现在页面上，但仍然会向后台提交其数据，这种手段常用于安全（CSRF攻击）； button: 没有作用的按钮； submit: 提交按钮； reset: 重置按钮； placeholder: 这个属性的值会展示在输入框内作为提示使用，该值不会提交后台，在用户输入真正的数据时展示文字也会随之消失。 label 标签12&lt;label for="username"&gt;用户名&lt;/label&gt;&lt;input type="text" id="username" name="username"&gt; label 标签的 for 属性如果与某个 input 标签的 id 属性相同，那么当点击这个 label 标签时，那个 input 标签将获得 focus 状态。 select 标签1234&lt;select name="sex"&gt; &lt;option value="male"&gt;male&lt;/option&gt; &lt;option value="female" selected&gt;female&lt;/option&gt;&lt;/select&gt; 下拉菜单标签，必须要有 name 属性。 option 标签下拉菜单的选项标签，如果有 selected 属性，那么这个选项就是默认选择的项。 textarea 标签1&lt;textarea name="article" cols="60" rows="50"&gt;输入内容&lt;/textarea&gt; 多行输入框， cols 和 rows 属性分别控制其长宽。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 基础知识]]></title>
    <url>%2F2018%2F09%2F01%2FHTML-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[HTML 页面结构 什么是HTML: HyperText Markup Language, 即超文本标记语言。 HTML5 发布于 2014年10月。 HTML、XML、XHTML 的区别: HTML: 超文本标记语言，是语法较为松散、不严格的 web 语言。 XML: 可扩展标记语言，主要用于存储数据和结构。 XHTML: 可扩展超文本标记语言，基于 XML ，语法类似于 HTML ，但语法更严格。 写页面要注意内容、样式、行为分离。 写 HTML 时先不管样式，重点放在 HTML 的结构和语义化上，让 HTML 能体现页面结构或内容。之后再去写样式； 写 JS 时，尽量不要用 JS 直接操作样式，而是通过给元素增删 class 来控制样式变化； HTML 内不允许出现属性样式，尽量不要出现行内样式。 语义化 HTML ，是指选择合适的标签、使用合理的代码结构，便于开发者阅读，同时让浏览器的爬虫和机器很好地解析。 常见标签标题标签表示标题大小，h1 最大，h6 最小。 123456&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;六级标题&lt;/h6&gt; 段落标签表示大段文字。 1&lt;p&gt;这里是文字&lt;/p&gt; 链接标签链到一个地址 1&lt;a href="https://google.com" target="_blank" title="google"&gt;Google&lt;/a&gt; href: 该属性为必要属性，用于规定链接的目标 URL； target: 该属性指定在何处显示链接的资源，共有5种可选项: _blank: 在新窗口打开； _self: 在当前页面加载； _parent: 加载响应到当前框架的HTML4父框架或当前的HTML5浏览上下文的父浏览上下文。如果没有parent框架或者浏览上下文，此选项的行为方式相同 _self； _top: HTML4中：加载的响应成完整的，原来的窗口，取消所有其它frame； HTML5中：加载响应进入顶层浏览上下文（即，浏览上下文，它是当前的一个的祖先，并且没有parent）。如果没有parent框架或者浏览上下文，此选项的行为方式相同 _self； iframeName: 如果页面中存在一个 iframe 标签，则在这个 iframe 窗口打开。 title: 使用该属性时，鼠标指向链接可以显示链接的文字注释。 图片标签用于展示一张图片 1&lt;img src="" alt=""&gt; src: 指图片的资源地址。 alt 的作用: 图片失效时告诉访问者这张图片是什么； 告诉搜索引擎这张图片是什么； 对于特殊浏览者，如视力障碍，让他们知道这张图片是什么。 区块标签1&lt;div&gt;&lt;/div&gt; div 的语义就是“一大块”，用于给页面划分区块，让结构更清晰。 div 标签有哪些属性 id 具有唯一性，是某个元素在页面内的独一无二的属性 class 代表一类，不同的元素可以有相同的类属性，在写css和js时便于操作同类属性的元素 无序列表标签1234567891011&lt;ul class=""&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt; ... &lt;ul&gt; &lt;li&gt;...&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; ul: unsort list，无序列表； 用于表示并列的内容； ul 的直接子元素是 li； 可以嵌套。 有序列表标签 ol: order list，有序列表； 用于表示带步骤或者编号的并列内容； ol 的直接子元素只能是 li； 可以嵌套。 自定义列表标签用于展示一系列“标题：内容…“ 123456789&lt;dl&gt; &lt;dt&gt;商品名称：&lt;/dt&gt; &lt;dd&gt;青花瓷&lt;/dd&gt; &lt;dt&gt;特征&lt;/dt&gt; &lt;dd&gt;白色&lt;/dd&gt; &lt;dd&gt;圆口&lt;/dd&gt; &lt;dt&gt;商品介绍&lt;/dt&gt; &lt;dd&gt;......&lt;/dd&gt;&lt;/dl&gt; 按钮标签1&lt;button&gt;点我&lt;/button&gt; strong em span1&lt;strong&gt;表示非常重要&lt;/strong&gt; 1&lt;em&gt;表示重要，没有strong那么强烈&lt;/em&gt; 1&lt;span&gt;本身没有作用，仅为此处增加一个标记，可以让css及js更精准地控制页面内的特定文本&lt;/span&gt; 注意：不要为了改变样式而使用 strong 和 em，以符合语义化要求的方法使用它们。 iframe用于在当前页面上嵌入一个页面。注意跨域操作问题 12&lt;iframe src="https://google.com" name="google"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://baidu.com" target="google"&gt;baidu&lt;/a&gt;&lt;/p&gt; 试试上面的代码，看看有什么结果？ 表格标签 用于展示表格，不要用来做布局； thead tbody tfoot 可省略； 浏览器会自动添加 border-collapse: collapse; 用于合并边框。 12345678910111213141516171819&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年纪&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;小明&lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小花&lt;/td&gt; &lt;td&gt;17&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt;&lt;/tfoot&gt;&lt;/table&gt; 其它常用标签!DOCTYPE html文档对象模型。每个HTML文档都必须有的标签，用于声明该文档是什么标准。 文档声明的作用: 告诉浏览器这个HTML文档是用什么版本的HTML规范写的，以便浏览器正确解析文档。 严格模式和混杂模式指什么: 严格模式（推荐）现在也称为标准模式，在该模式下，浏览器会严格按照 HTML 和 CSS 标准来解析、渲染你的文档。 混杂模式（不推荐）的由来是一个历史问题。在互联网早期，网页一般写成两个版本：一个写给网景公司的 Navigator浏览器，一个写给微软公司的IE浏览器。当W3C制定了 Web 标准后，这两个浏览器不能马上开始按标准来解析渲染页面，因为这样会破坏当时大部分页面的显示效果。所以各浏览器就引入了混杂模式，在该模式下，浏览器会模拟Navigator 4和IE5的非标准行为来解析渲染页面，这样做就是为了兼容在W3C标准出现之前就存在的那些“不标准”的页面。 &lt;!doctype html&gt; 的作用就是让浏览器进入标准模式，使用最新的 HTML5标准来解析渲染页面；如果不写，浏览器就会进入混杂模式，而这是我们要避免的。 html页面的根节点，所有内容都在这个标签里面。包括一个属性lang=&quot;&quot;，用于说明该页面是什么语言。 head当前页面的头部节点，保存了头信息，与内容展示无关。 &lt;meta&gt;: 保存一些不在页面展示的信息。主要有以下几个属性: charset: 编码格式，告诉浏览器页面的编码方式，避免出现解析错误； name=&quot;viewport&quot;: 更适用于移动端的展示； name=&quot;keywords&quot;: 向搜索引擎展示页面的关键字信息； name=&quot;description&quot;: 向搜索引擎展示页面的描述性信息。 body当前页面的主体节点，包括页面内容展示的所有信息。 注意点 标签属性全小写； 标签要闭合，自闭合标签可以省略； 标题里不能有段落，段落里不能有标题； 注意代码工整，有统一的缩进。 块级元素和行内元素 块级元素会占据整行空间； 行内元素只占据本身内容的空间。]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静态博客搭建指北（二）]]></title>
    <url>%2F2018%2F08%2F31%2F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[静态博客搭建与美化第二弹上线～ 添加「标签」页面以下内容参考 「NexT」主题配置 在终端窗口下，定位到 Hexo 站点目录下输入以下命令： 1$ hexo new page tags 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 1234title: 标签date: 2014-12-22 12:39:04type: "tags"--- 在菜单中添加链接。编辑主题配置文件， 添加 tags 到 menu 中，如下: 1234menu: home: / archives: /archives tags: /tags 同样的原理，分类(categories)、关于(about)等页面也可以自行添加了。 给文章模版增加分类选项当我们通过 hexo n &quot;name&quot; 命令来新建一篇文章时，默认格式是这样的12345---title: namedate: yyyy-mm-dd xx:xx:xxtags:--- 可编辑的选项有标题、时间、标签，但是没有分类选项，如果每次都手动添加，难免感到麻烦。所以让我来给文章模版加入 categories: 项： 找到站点根目录下的 scaffolds/post.md 文件 打开该文件，在 tags: 项上面添加 categories: 并保存 再次执行 hexo n &quot;name&quot; 命令，新建的文件里就有 categories: 项了 设置分类列表有时我们给文章设置的分类会包含中文，比如1categories: 编程 这样推送后，分类列表里就会出现编程这个选项，但是有点瑕疵的是访问路径也会包含中文1*/categories/编程 如果不希望这种情况出现，可以通过设置站点配置文件实现123456# Category &amp; Tagdefault_category: uncategorizedcategory_map: 编程: programming 生活: life 其他: other 第二弹到这里就结束了，内容不多，但相对第一弹更偏向细节，毕竟粗枝大叶的搭建工作在第一弹已经完成了，剩下的都是细节～ 以上！]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静态博客搭建指北（一）]]></title>
    <url>%2F2018%2F08%2F31%2F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[部署前的准备博客放在哪里首先要决定博客托管的地方。GitHub Pages 是一个不错的选择，毕竟 GitHub 出品，安全、稳定、高效，拥有如此多的优点并且免费，对我来说就是首选了。 使用什么框架Google 一下适用于 GitHub Pages 的静态博客框架，出现频率最高的是 Hexo 和 Jeckll ，GitHub 似乎对 Jeckll 有某种程度上对原生支持，但 Hexo 是基于 JavaScript 和 Nodejs 的应用，对一个前端学习者而言，凡是能和所学搭边的都有无比对吸引力，于是毫不犹豫选择 Hexo 。 GitHub 上需要做的准备在你的 GitHub 上新建一个仓库，注意仓库名的规则，否则不能用作 GitHub Pages 。 username.github.io 这里的 “uesrname” 就是你创建仓库时前面的 “Owner” 下的名字。 之后勾选下面的 “Initialize this repository with a README”，点击创建仓库即可。 部署过程Hexo文档上有详实的部署及配置说明，在此只列出部分基本操作，更多具体选项和配置请阅读文档相关条目（其实就是不会 →_→ ）。 安装 Hexo安装 Hexo 前，首先检查计算机中是否已安装下列应用程序： Node.js Git 上述应用程序安装完毕后，就可以安装 Hexo 了。 1$ npm install -g hexo-cli 在本地建站安装完后执行下列命令， Hexo 会在指定文件夹内新建所需的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 执行命令后在指定文件夹内会出现以下文件结构。 1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 再执行以下命令，安装 hexo-deployer-git 1$ npm install hexo-deployer-git --save 配置“_config.yml” 文件保存了大部分网站配置信息，部分配置说明如下。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #博客的基本信息title: Blog Title #博客标题subtitle: #博客副标题description: #博客描述，部分主题会用来生成简介author: Your Name #博客作者language: zh-Hans #语言timezone: #时区，默认与你的计算机相同# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com #你自己的域名root: / #根目录位置，如果只是github pages的子目录需要更改permalink: :year/:month/:day/:title/permalink_defaults:# Directory #文件结构 默认即可source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing #编辑博文的选项new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: #代码高亮 enable: true #是否启用 line_number: true #是否显示行号 auto_detect: true tab_replace:# Category &amp; Tag #分类与标签default_category: uncategorizedcategory_map:tag_map:# Date / Time format #日期显示格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination #分页器## Set per_page to 0 to disable paginationper_page: 3pagination_dir: page# Extensions #拓展## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/## 主题安装参照下文所述theme: next #主题更换# Deployment #部署参数## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:username/username.github.io.git #你的GitHub仓库地址 branch: masterindex_generator: per_page: 3 ##首頁默认10篇文章标题 如果值为0不分页archive_generator: per_page: 10 ##归档页面默认10篇文章标题 yearly: true ##生成年视图 monthly: true ##生成月视图tag_generator: per_page: 10 ##标签分类页面默认10篇文章category_generator: per_page: 10 ###分类页面默认10篇文章 常用指令 hexo n &lt;title&gt;: 新建一篇文章 hexo g: 生成静态文件 hexo d: 部署上线 hexo s: 启动本地服务器 hexo clean: 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 美化及扩展换一个主题如果不喜欢 Hexo 的默认主题，可以在主题商店中挑选你好看的主题安装，下面以使用人数较多的 NexT 主题为例讲解如何安装一款主题。 执行下列命令，安装主题。 12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next 执行下列命令，更新主题 12$ cd themes/next$ git pull 更新 Hexo 配置文件 “_config.yml” 1theme: next 至此，主题更换完毕 装一个插件初始状态下的 NexT 主题是没有搜索功能的，所以我们需要为其安装搜索服务。 我选取 Local Search 做为我的博客的搜索服务。 安装 hexo-generator-searchdb ，在站点的根目录下执行以下命令 1$ npm install hexo-generator-searchdb --save 编辑站点配置文件 _config.yml ，新增以下内容 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件 _config.yml(位于 theme/next 内)，启用搜索功能 123# Local searchlocal_search: enable: true 执行部署命令后，博客就有了搜索功能了。 这里给出 NexT 主题的第三方集成服务网址，上面给出了各个第三方服务的详细安装方法。 初次部署完结结语到此为止，整个博客的基础功能已经具备了，静态博客搭建指北的第一篇就到这里结束了。有些地方写的并不十分详细，原因就是懒→_→ 贴出一篇更为详细的搭建说明留作参考，更多配置相关请查看官方文档。 日后研究出更多 Hexo 功能或插件的使用方法再来继续更新这个系列。 以上！]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写博客啦]]></title>
    <url>%2F2018%2F08%2F31%2F%E5%BC%80%E5%8D%9A%E5%AE%A2%E5%95%A6%2F</url>
    <content type="text"><![CDATA[在不努力就买不起键盘、台灯、书架、MBPR… 所以，努力吧～！]]></content>
      <categories>
        <category>胡说八道</category>
      </categories>
  </entry>
</search>
